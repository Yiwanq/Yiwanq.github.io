<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Qwan&#39;s blog</title>
  <subtitle>Which would be worse? To live as a monster or to die as a good man?</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://Yiwanq.com/"/>
  <updated>2017-06-13T12:00:25.475Z</updated>
  <id>http://Yiwanq.com/</id>
  
  <author>
    <name>Qwan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>mysql、redis、mongodb对比以及与python的交互</title>
    <link href="http://Yiwanq.com/2017/04/23/2017_4_database/"/>
    <id>http://Yiwanq.com/2017/04/23/2017_4_database/</id>
    <published>2017-04-23T12:53:40.000Z</published>
    <updated>2017-06-13T12:00:25.475Z</updated>
    
    <content type="html"><![CDATA[<p>数据库使得底层数据得到持久化存储，保证数据的安全可靠性，并提供简易快捷的接口供数据需求者进行快速检索。在国内高校中，大学生普遍学习的数据库技术是Microsoft SQL Server，但它只能在wiindows上使用，一般配置ASP.Net 开发，为在windows系统下开发程序的人员带来了极大便利，属于关系型数据库。在本文中，我们主要涉及了三种数据库，如题，第一个是关系型数据库，后两个属于no sql，主要关注于它们的不同之处与操作，以及配合python 做交互。</p>
<p>因为现在大数据非常非常非常火，所以提供了两个链接，大家可以看一看：</p>
<ul>
<li><a href="https://db-engines.com/en/ranking" target="_blank" rel="external">数据库受欢迎程度排名</a></li>
<li><p><a href="http://mattturck.com/wp-content/uploads/2017/04/Big-Data-Landscape-2017-Matt-Turck-FirstMark.png" target="_blank" rel="external">2017年大数据版图</a></p>
</li>
<li><p><img src="../images/database.png" alt="数据库分类"></p>
</li>
</ul>
<h1 id="mysql、redis、mongodb对比"><a href="#mysql、redis、mongodb对比" class="headerlink" title="mysql、redis、mongodb对比"></a>mysql、redis、mongodb对比</h1><h2 id="mysql-："><a href="#mysql-：" class="headerlink" title="mysql ："></a>mysql ：</h2><ul>
<li>关系型数据库，需要创建库，并严格定义表结构；</li>
<li>innodb行锁（仅对于操作数据库，如写入），支持事务，回文，myisam是表锁，不支持事务，查询快；</li>
<li>性能，innodb强，服务器段多数用innodb引擎，而客户端一般用myisam；</li>
</ul>
<a id="more"></a> 
<ul>
<li>C和C++编写；</li>
<li>存储数据时，计算机默认为32位，所以不用考虑字节；</li>
<li>查询快，事务差；</li>
<li>windows上创建数据库比较方便的有SQLyog；</li>
<li>null跟任何结果做运算，结果都为null</li>
</ul>
<h3 id="图形界面软件："><a href="#图形界面软件：" class="headerlink" title="图形界面软件："></a>图形界面软件：</h3><p>   navicat for mysql</p>
<h3 id="服务器端基本操作命令：（打开）"><a href="#服务器端基本操作命令：（打开）" class="headerlink" title="服务器端基本操作命令：（打开）"></a>服务器端基本操作命令：（打开）</h3><pre><code>sudo vi /etc/mysql/mysql.conf.d/mysqld.cnf
sudo service mysql start/stop/restarat
sudo /etc/init.d/mysql start/stop/restarat
</code></pre><h3 id="客户端基本操作命令（记得-）："><a href="#客户端基本操作命令（记得-）：" class="headerlink" title="客户端基本操作命令（记得 + ;）："></a>客户端基本操作命令（记得 + ;）：</h3><pre><code>mysql -uroot -pmysql  （-h 指定服务器的ip，u指用户，p指密码）

show databases;
select database();
use 数据库名;
drop database 数据库名;

show tables;
desc 表名;
show create table 表名;
alter table 表名 add/change/modify/drop ...
drop table 表名;
</code></pre><h3 id="数据的命令-即-sql语句："><a href="#数据的命令-即-sql语句：" class="headerlink" title="数据的命令,即 sql语句："></a>数据的命令,即 sql语句：</h3><pre><code>create table 
insert/update/delete/select 
聚合函数：count()/max(中可加条件)/min()/sum()/avg(),仅用于select 后面，不可用于from后面，且单独使用
group by ... having ...
order by asc/desc
limit 0, 3 下标从0开始，取3个
inner/left/right join on 条件
union 全连接
自连接：相同表，不同as别名

举个栗子：
create table t_hero(
id int unsigned auto_increment primary key;
name varchar(10) unique not null,
age tinyint unsigned default 0,
gender set(&quot;男&quot;, &quot;女&quot;),
state varchar(10)
);

insert into classes(name) values(&apos;NO1&apos;);
update classes set name=&apos;NO2&apos; where id=4;
delete from students where clsid=1;
select * from students;

SELECT tb.bookName, tb.price, tby.bookTypeName
FROM t_book as tb
INNER JOIN t_bookType as tby
ON tb.bookTypeId = tby.id;
</code></pre><h3 id="mysql-与-python交互："><a href="#mysql-与-python交互：" class="headerlink" title="mysql 与 python交互："></a>mysql 与 python交互：</h3><pre><code>除查询外执行的都是事务，出问题执行回滚

import MySQLdb

def insert_data():
    sql = &quot;DELETE FROM t_book where bookName like &apos;%明%&apos;&quot;
    try:
        # 创建MySQL数据库连接对象
        conn = MySQLdb.connect(
            host = &quot;localhost&quot;, # 指定数据库所在的ip
            port = 3306,       # 指定数据库的端口号
            user = &apos;root&apos;,      # 指定登录数据库的用户
            passwd = &apos;***&apos;, # 登录数据库的用户密码
            db = &apos;db_book&apos;,     # 指定的操作的数据库名称
            charset = &apos;utf8&apos;    # 指定字符集，和数据库字符集相同
        )
        cursor = conn.cursor()
        cursor.execute(sql)
        conn.commit()
    except Exception, e:
        print e
        conn.rollback()
    finally:
        cursor.close()
        conn.close()
        print &quot;LOG: 执行结束!&quot;


if __name__ == &quot;__main__&quot;:
    insert_data()
</code></pre><h2 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h2><ul>
<li><a href="http://redis.cn" target="_blank" rel="external">中文网站</a></li>
<li><a href="http://redis.io" target="_blank" rel="external">官方网站</a></li>
</ul>
<h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><ul>
<li>性能极高：Redis能读取速度约110000次/s，写入速度约81000次/s </li>
<li>支持丰富的数据类型： Redis支持最大多数开发人员已经知道如列表，集合，可排序集合，哈希等数据类型。</li>
<li>操作都是原子的，从而确保当两个客户同时访问 Redis 服务器得到的是更新后的值（最新值）。</li>
</ul>
<h3 id="案例："><a href="#案例：" class="headerlink" title="案例："></a>案例：</h3><p>  全球最大的用户就是新浪微博，但由于redis 造价较高，多数it公司采用redis + mysql 的模式</p>
<h3 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h3><pre><code>* nosql，C语言编写，高性能内存数据库；
* 总共有16个库，不需要创建库，直接select选择库；
* key-value型:
  * key:直接创建
  * 形式：string、hash、list（链表）、set、zset（有序集合）；
  * value ：filed与value；

* 社交软件的推荐系统，set类型，交集并集操作；
* 游戏中排名zset类型；
* 下表索引从零开始，左右都包含；
* redis-cli --raw 可输入中文；

* redis中deamonize是否以守护进程运行
  * 若yes则不会在命令行阻塞，后台服务
  * no则以非守护进程运行，当前终端阻塞，并显示服务状态;

* redis主从服务器从只能连接主的，两者间share data
* 集群更像是一个网络，没有主从之分，节点之间share data，或者某个指管存储，某些只管读取
</code></pre><h3 id="图形界面："><a href="#图形界面：" class="headerlink" title="图形界面："></a>图形界面：</h3><pre><code>Redis Desktop Manager  （redis自带）
</code></pre><h3 id="服务器端基本操作命令："><a href="#服务器端基本操作命令：" class="headerlink" title="服务器端基本操作命令："></a>服务器端基本操作命令：</h3><pre><code>sudo redis-server /etc/redis/redis.conf
or sudo redis-server 默认data下的配置文件，与前者不一致
</code></pre><h3 id="客户端基本操作命令："><a href="#客户端基本操作命令：" class="headerlink" title="客户端基本操作命令："></a>客户端基本操作命令：</h3><pre><code>redis-cli -h 192.168.xx.xxx 
redis-cli  （默认本机）

keys *
type key     
del key

string: 最大存储 512MB
get/setnx/mset/msetnx name &apos;Sam&apos;
get/getnx/mget/mgetnx name
getset name &apos;Sam&apos;
setrange email 11 &apos;Sam&apos;  # 用Sam覆盖第11位开始的值
getrange name 1 3  # 取1到3位置的值
incr/decr age 
incrby/decrby age 10
append name &apos;Sam&apos; # 后面 + ‘Sam’

hash field：value的映射表，2的32次方-1（40多亿）键值对
hset/hsetnx/hmset myhash field &apos;Sam&apos;
hget/hgetnx/hmget myhash field
hkeys/hvals/hgetall myhash
hlen myhash
hincrby/hincrbyfloat myhash num 10
hexists/hdel myhash field
hstrlen myhash field

list 列表 2的32次方-1（40多亿）
lrange mylist 0 -1 # 返回全部元素
lpush/rpush my_llist &quot;mysql&quot; &quot;redis&quot; &quot;mongodb&quot;
linsert my_llist before或after 现有元素 新元素
lindex my_rlist 4 # 指定位置的元素
lset my_llist index value #修改指定位置index元素
lrem my_llist count value # count &gt; 0 从头，&lt; 0 从尾，= 0 全部
lpop/rpop/blpop/brpop my_llist 
ltrim my_llist start stop  # 修剪列表

set 集合 哈希表实现，复杂度O(1);
无序集合/不重复/无修改操作/元素为string
sadd mset &apos;python&apos; &apos;redis&apos; &apos;mongodb&apos;
scard mset # 返回元素
sismenber mset &apos;redis&apos;
srandmember mset (默认为1，可加数字，返回个数)
smenbers mset # 返回所有成员
srem mset &apos;mysql&apos; # 删除成员
sinter/sunion/sdiff mset01 mset02 # 交、并、差
sinterstore/sunionstore/sdiffstore mset mset01 mset02 # 将结果保存到mset中

zset :
     * 有序集合（sorted set） 2的32次方-1（40多亿） 
     * 跟随double类型分数（score权重）升序排列；
     * key 即为集合名称，例如myzset
zadd key score1 member1 score2 member2 ...
zcount key min max  # 返回score在min与max之间的元素
zrange key start stop [WITHSCORES] # 索引范围元素，同上者不同
zrangebyscore key min max # 返回score范围内的元素
zscore key member # 返回member的score
zrem key member1 member2
zremrangebyscore key min max
zincrby key increment member #为有序集key的成员member的score值加上增量increment 
zrevrange key start stop [WITHSCORES]  # 按从⼤到⼩排序⽅式进⾏排序
</code></pre><h3 id="数据备份与恢复："><a href="#数据备份与恢复：" class="headerlink" title="数据备份与恢复："></a>数据备份与恢复：</h3><pre><code>redis 127.0.0.1:6379&gt; SAVE  # 创建当前数据库的备份，该命令将在 redis 安装目录中创建dump.rdb文件

恢复数据，将备份文件 (dump.rdb) 移动到 redis 安装目录并启动服务即可。
获取 redis 安装目录可以使用 CONFIG 命令，如下所示：
redis 127.0.0.1:6379&gt; CONFIG GET dir
1) &quot;dir&quot;
2) &quot;/home/用户名&quot;
</code></pre><h3 id="redis-与-python交互："><a href="#redis-与-python交互：" class="headerlink" title="redis 与 python交互："></a>redis 与 python交互：</h3><pre><code>设置值返回true/false, 删改返回影响行数，查找返回内容
redis_cli = redis.StrictRedis()
redis_pipe.set(&quot;Sam&quot;, &quot;300&quot;) 第一列永远是key，之后是value内容
</code></pre><h4 id="一般操作"><a href="#一般操作" class="headerlink" title="一般操作"></a>一般操作</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"># coding：utf-8</div><div class="line">def test():</div><div class="line">    try:</div><div class="line">        #redis_cli = redis.Redis(host = &quot;localhost&quot;, port = 6379, db=0)</div><div class="line">        #redis_cli = redis.StrictRedis(host = &quot;localhost&quot;, port = 6379, db=0)</div><div class="line">        redis_cli = redis.StrictRedis() # 本机</div><div class="line">        result = redis_cli.set(&quot;name&quot;, &quot;Sam&quot;) # 增</div><div class="line">        result = redis_cli.set(&quot;name&quot;, &quot;Lily&quot;) # 改</div><div class="line">        redis_cli.delete(&quot;jocabi&quot;,&quot;Joy&quot;) # 删</div><div class="line"></div><div class="line">        print result</div><div class="line">    except Exception, e:</div><div class="line">        print e</div><div class="line"></div><div class="line">if __name__ == &quot;__main__&quot;:</div><div class="line">    test()</div></pre></td></tr></table></figure>
<h4 id="管道操作"><a href="#管道操作" class="headerlink" title="管道操作"></a>管道操作</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">import redis</div><div class="line"></div><div class="line">def pipeline():</div><div class="line">    try:</div><div class="line">        redis_cli = redis.StrictRedis()</div><div class="line">        redis_pipe = redis_cli.pipeline()</div><div class="line"></div><div class="line">        redis_pipe.set(&quot;Sam&quot;, &quot;300&quot;)</div><div class="line">        redis_pipe.set(&quot;Lily&quot;, &quot;200&quot;)</div><div class="line">        redis_pipe.keys()</div><div class="line"></div><div class="line">        pipe_list = redis_pipe.execute()</div><div class="line">        for item in pipe_list:</div><div class="line">            print item</div><div class="line">    except Exception, e:</div><div class="line">        print e</div><div class="line"></div><div class="line">if __name__ == &quot;__main__&quot;:</div><div class="line">    pipeline()</div></pre></td></tr></table></figure>
<h2 id="mongodb"><a href="#mongodb" class="headerlink" title="mongodb"></a>mongodb</h2><h3 id="动态显示json网站："><a href="#动态显示json网站：" class="headerlink" title="动态显示json网站："></a>动态显示json网站：</h3><p>mongodb 特别适合存储json 格式的数据，所以我们可能会遇到动态显示json的网站<a href="www.json.cn/">www.json.cn/</a>，也可在浏览器的扩展程序中加入JSONView工具包。</p>
<h3 id="特点-："><a href="#特点-：" class="headerlink" title="特点 ："></a>特点 ：</h3><pre><code>* C++ 语言编写，分布式 文件存储，
* 不需要建库，document格式，
* key-value 格式，高性能和高度伸缩性（适合数十/数百台服务器），符合json格式；
* 不适合高度事务与sql语句查询；
* MongoDB使⽤的是内存映射存储引擎，它会把磁盘IO操作转换成内存操作，如果是读操作，内存中的数据起到缓存的作⽤，如果是写操作，内存还可以把随机的写操作转换成顺序的写操作，⼤幅度提升性能；
* logappend错误日志追加，一般不使用，因为日志会越来越大；
* mongodb使用系统的内存，进行动态内存分配，对内存消耗较大，根据os * map机制动态分配后冷数据会被清除掉；
</code></pre><h3 id="服务器端基本操作命令：-1"><a href="#服务器端基本操作命令：-1" class="headerlink" title="服务器端基本操作命令："></a>服务器端基本操作命令：</h3><pre><code>sudo mongod 
sudo mongod -f /etc/mongod.cnf  # 配置文件启动
sudo mongod --logpath=/data/db/mongodb.log --fork  # 守护进程启动
sudo mongod --auth  # 用户认证方式启动
exit
</code></pre><h3 id="客户端基本操作命令：-1"><a href="#客户端基本操作命令：-1" class="headerlink" title="客户端基本操作命令："></a>客户端基本操作命令：</h3><pre><code>mongo
</code></pre><h3 id="数据操作：-数据库-→-集合-→-文档（key-value）"><a href="#数据操作：-数据库-→-集合-→-文档（key-value）" class="headerlink" title="数据操作： 数据库 → 集合 → 文档（key-value）"></a>数据操作： 数据库 → 集合 → 文档（key-value）</h3><pre><code>show dbs
db.dropDatabase()
use 数据库名

show collections
db.createCollection(&apos;stu&apos;) # 当前数据库创建集合
db.stu.drop() # stu 指刚创建的集合

db.stu.insert({_id = 1, name : &quot;Sam&quot;, age = 18}) # _id自动创建id对象
db.stu.find()
db.集合名称.find({条件文档}).pretty()
比较运算符：默认 = ; $lt/$lte/$gt/$gte/$ne
逻辑运算符：默认 and; $and/$or/$in # 后面加[]
正则：使用 / /  或 $regex  编写正则表达式
自定义：$where

栗子：db.stu.find({name : {$regex : &quot;DING&quot;, $options : &quot;$i&quot;}})  # 匹配忽略大小写
      db.stu.find({$where : function() {return this.age &gt; 30}})

db.集合名称.find().limit(NUMBER) # 指定数量的文档
db.集合名称.find().skip(NUMBER)  # 跳过
投影：db.集合名称.find({},{字段名称:1,...}) # 1表示显示，0表示不显示
排序：db.集合名称.find().sort({字段:1,...}) # 1升序 -1降序
统计：db.集合名称.find({条件}).count()
      db.集合名称.count({条件}) 
去重：db.集合名称.distinct(&apos;去重字段&apos;,{条件})

db.集合名称.save(document)

db.集合名称.update(
    &lt;query&gt;,
    &lt;update&gt;,
    {multi: &lt;boolean&gt;}
)
db.stu.update({},{$set:{gender:0}},{multi:true}) # 修改

db.集合名称.remove(
    &lt;query&gt;,
    {
    justOne: &lt;boolean&gt;   # true/1 只删除一条；默认false
    }
)

聚合：
    db.集合名称.aggregate([ {管道 : {表达式}} ])

    管道：
      $group  ：将集合中的文档分组，可用于统计结果
    $match  ：过滤数据，只输出符合条件的文档
    $project  ：修改输入文档的结构，如重命名、增加、删除字段、创建计算结果
    $sort  ：将输入文档档排序后输出
    $limit  ：限制聚合管道返回的⽂档数
    $skip  ：跳过指定数量的文档，并返回余下的文档
    $unwind  ：将数组类型的字段进行拆分

    表达式：
    $sum  ：计算总和，$sum:1同count表示计数
    $avg  ：计算平均值
    $min  ：获取最⼩值
    $max  ：获取最⼤值
    $push  ：在结果⽂档中插⼊值到⼀个数组中
    $first  ：根据资源⽂档的排序获取第⼀个⽂档数据
    $last  ：根据资源⽂档的排序获取最后⼀个⽂档数据

    栗子：若_id为null，则集合中所有文档分为一组
    db.stu.aggregate([
        {$group:
        {
        _id:&apos;$gender&apos;,
        counter:{$sum:1}
        }
        }
    ])
</code></pre><h3 id="备份与恢复："><a href="#备份与恢复：" class="headerlink" title="备份与恢复："></a>备份与恢复：</h3><pre><code>备份：mongodump -h 服务器地址 -d 数据库名 -o 备份的文件位置
恢复：mongodump -h 服务器地址 -d 数据库名 --dir 备份数据所在位置
</code></pre><h3 id="与python交互："><a href="#与python交互：" class="headerlink" title="与python交互："></a>与python交互：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">#coding=utf-8</div><div class="line"></div><div class="line">from MySQLdb import *</div><div class="line">from pymongo import *</div><div class="line"></div><div class="line">try:</div><div class="line">    #建立连接，获取cursor</div><div class="line">    conn = connect(host=&apos;localhost&apos;,port=3306,db=&apos;test1&apos;,user=&apos;root&apos;,passwd=&apos;***&apos;,charset=&apos;utf8&apos;)</div><div class="line">    cursor = conn.cursor()</div><div class="line"></div><div class="line">    #执行查询</div><div class="line">    sql = &apos;select * from v_cls_stu&apos; # 仅有两列，所有下面item[0],item[1]</div><div class="line">    cursor.execute(sql)</div><div class="line">    result = cursor.fetchall()</div><div class="line"></div><div class="line">    #关闭</div><div class="line">    cursor.close()</div><div class="line">    conn.close()</div><div class="line"></div><div class="line">    # print(result)</div><div class="line">    #向数据存入mongodb</div><div class="line">    client = MongoClient(&apos;mongodb://localhost:27017&apos;)</div><div class="line">    db = client.test1</div><div class="line">    for item in result:</div><div class="line">        db.cls_stu.insert(&#123;&apos;clsName&apos;:item[0],&apos;stuName&apos;:item[1]&#125;)</div><div class="line">    print(&apos;ok&apos;)</div><div class="line">except Exception,e:</div><div class="line">    print(e)</div></pre></td></tr></table></figure>
<ul>
<li>find()方法，会返回cursor对象，即id位置，用for…in…遍历；</li>
<li>find_one()返回找到的值，没有则为null；</li>
</ul>
<h3 id="mongodb基本操作"><a href="#mongodb基本操作" class="headerlink" title="mongodb基本操作"></a>mongodb基本操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">#coding=utf-8</div><div class="line">from pymongo import *</div><div class="line"></div><div class="line">try:</div><div class="line">	#连接</div><div class="line">	client=MongoClient(&apos;localhost&apos;,27017)</div><div class="line"></div><div class="line">	# 构造json对象</div><div class="line">	doc1=&#123;&apos;name&apos;:&apos;hr&apos;,&apos;home&apos;:&apos;thd&apos;&#125;</div><div class="line">	doc2=&#123;&apos;name&apos;:&apos;mnc&apos;,&apos;home&apos;:&apos;njc&apos;&#125;</div><div class="line">	doc=[doc1,doc2]</div><div class="line">	</div><div class="line">	db=client.py3</div><div class="line">	db.stu.insert_many(doc) # 插入文档，都是&#123;key-value&#125;形式</div><div class="line"></div><div class="line">	doc=db.stu.find_one() # 查找</div><div class="line">	print &apos;%s--%s&apos;%(doc[&apos;name&apos;],doc[&apos;hometown&apos;])</div><div class="line"></div><div class="line">	cursor=db.stu.find(&#123;&apos;hometown&apos;:&apos;北京&apos;&#125;) # 查找多条</div><div class="line">	for doc in cursor:</div><div class="line">		print &apos;%s--%s&apos;%(doc[&apos;name&apos;],doc[&apos;hometown&apos;])</div><div class="line"></div><div class="line">	db.stu.update_one(&#123;&apos;gender&apos;:False&#125;,&#123;&apos;$set&apos;:&#123;&apos;name&apos;:&apos;Jane&apos;&#125;&#125;) # 修改</div><div class="line">	db.stu.update_many(&#123;&apos;gender&apos;:True&#125;,&#123;&apos;$set&apos;:&#123;&apos;name&apos;:&apos;Jack&apos;&#125;&#125;) # 修改多条</div><div class="line"></div><div class="line">	db.stu.delete_one(&#123;&apos;gender&apos;:True&#125;) # 删除</div><div class="line">	db.stu.delete_many(&#123;&apos;gender&apos;:False&#125;) </div><div class="line"></div><div class="line">except Exception,e:</div><div class="line">	print e</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;数据库使得底层数据得到持久化存储，保证数据的安全可靠性，并提供简易快捷的接口供数据需求者进行快速检索。在国内高校中，大学生普遍学习的数据库技术是Microsoft SQL Server，但它只能在wiindows上使用，一般配置ASP.Net 开发，为在windows系统下开发程序的人员带来了极大便利，属于关系型数据库。在本文中，我们主要涉及了三种数据库，如题，第一个是关系型数据库，后两个属于no sql，主要关注于它们的不同之处与操作，以及配合python 做交互。&lt;/p&gt;
&lt;p&gt;因为现在大数据非常非常非常火，所以提供了两个链接，大家可以看一看：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://db-engines.com/en/ranking&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;数据库受欢迎程度排名&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://mattturck.com/wp-content/uploads/2017/04/Big-Data-Landscape-2017-Matt-Turck-FirstMark.png&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;2017年大数据版图&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;img src=&quot;../images/database.png&quot; alt=&quot;数据库分类&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;mysql、redis、mongodb对比&quot;&gt;&lt;a href=&quot;#mysql、redis、mongodb对比&quot; class=&quot;headerlink&quot; title=&quot;mysql、redis、mongodb对比&quot;&gt;&lt;/a&gt;mysql、redis、mongodb对比&lt;/h1&gt;&lt;h2 id=&quot;mysql-：&quot;&gt;&lt;a href=&quot;#mysql-：&quot; class=&quot;headerlink&quot; title=&quot;mysql ：&quot;&gt;&lt;/a&gt;mysql ：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;关系型数据库，需要创建库，并严格定义表结构；&lt;/li&gt;
&lt;li&gt;innodb行锁（仅对于操作数据库，如写入），支持事务，回文，myisam是表锁，不支持事务，查询快；&lt;/li&gt;
&lt;li&gt;性能，innodb强，服务器段多数用innodb引擎，而客户端一般用myisam；&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="数据库" scheme="http://Yiwanq.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="mysql、redis、mongodb、python" scheme="http://Yiwanq.com/tags/mysql%E3%80%81redis%E3%80%81mongodb%E3%80%81python/"/>
    
  </entry>
  
  <entry>
    <title>认识 Linux</title>
    <link href="http://Yiwanq.com/2016/03/23/2016_3_linux/"/>
    <id>http://Yiwanq.com/2016/03/23/2016_3_linux/</id>
    <published>2016-03-23T12:33:30.000Z</published>
    <updated>2017-06-13T11:02:01.346Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux-初步认识"><a href="#Linux-初步认识" class="headerlink" title="Linux 初步认识"></a>Linux 初步认识</h1><p>Linux是一套开源的类Unix操作系统，是一个可实现多用户、多任务、支持多线程和多CPU的网络操作系统。它继承于Unix操作系统以网络为核心的设计思想，因而可运行主要的UNIX工具软件、应用程序和网络协议，并且支持32位和64位硬件。</p>
<p>目前，较为流行的版本有Linux Mint、Debian、Ubuntu、openSUSE、redhat、Fedora等。Linux系统应用很广泛，在个人桌面、服务器、嵌入式（如机顶盒、远程控制交换机、智能家居等）等领域都渗透其中。因为我接触的主要是ubuntu，以下内容涉及的也是ubuntu。<br>More info：<a href="http://www.xuexila.com/diannao/xitong/linux/656216.html" target="_blank" rel="external">Linux 系统排行排行</a></p>
<h2 id="Linux-目录存储"><a href="#Linux-目录存储" class="headerlink" title="Linux 目录存储"></a>Linux 目录存储</h2><p>不同于我们经常应用的windows，Linux 没有磁盘的概念，只有一个根目录，所有的文件都存放在根目录下，跟mac系统很相近。</p>
<ul>
<li>/：根目录，一般根目录下只存放目录，在Linux下有且只有一个根目录。所有的东西都以此为起点。当你在终端输入“/home”，你其实是在告诉电脑，先从根目录开始，再进入到home目录。<a id="more"></a> </li>
<li>/bin、usr/bin：可执行二进制文件的存放目录。</li>
<li>/boot: 存放Linux 系统启动时用到的文件，例如Linux 的内核文件：/boot/vmlinuz, 系统引导管理器：/boot/grub。</li>
<li>/dev：存放linux系统下的设备文件，访问目录下某个文件，相当于访问某个设备，<br>常用的是挂载光驱 mount /dev/cdrom /mnt。</li>
<li>/etc：系统配置文件存放的目录，不建议在此目录下存放可执行文件，重要的配置文件有/etc/inittab、/etc/fstab、 /etc/init.d、 /etc/X11、 /etc/sysconfig、 /etc/xinetd.d。</li>
<li>/home：系统默认的用户家目录，新增用户账号时，用户的家目录都存放在此目录<br>下，~表示当前用户的家目录，~edu 表示用户 edu 的家目录。</li>
<li>/lib、/usr/lib、/usr/local/lib：系统使用的函数库的目录，程序在执行过程中，需要调用一些额外的参数时需要函数库的协助。</li>
<li>/lost+fount：系统异常产生错误时，会将一些遗失的放置于此目录下。</li>
<li>/mnt: /media：光盘默认挂载点，通常光盘挂载于 /mnt/cdrom 下，当然，也可以选择任意位置进行挂载。</li>
<li>/opt：给主机额外安装软件所摆放的目录。</li>
<li>/proc：此目录的数据都在内存中，如系统核心、外部设备，网络状态，由于数据都存放于内存中，所以不占用磁盘空间，比较重要的目录有/proc/cpuinfo、/proc/interrupts、/proc/dma、/proc/ioports、/proc/net/* 等。</li>
<li>/root：系统管理员root的家目录。</li>
<li>/sbin、/usr/sbin、/usr/local/sbin：放置系统管理员使用的可执行命令，如fdisk、<br>shutdown、mount 等。与 /bin 不同的是，该目录是给系统管理员 root使用的命<br>令，一般用户只能”查看”，不能设置和使用。</li>
<li>/tmp：一般用户或正在执行的程序临时存放文件的目录，任何人都可以访问，重要数<br>据不可放置在此目录下。</li>
<li>/srv：服务启动之后需要访问的数据目录，如 www 服务需要访问的网页数据存放在<br>/srv/www 内。</li>
<li>/usr：应用程序存放目录，/usr/bin 存放应用程序，/usr/share 存放共享数据，/usr/lib<br>存放不能直接运行的，却是许多程序运行所必需的一些函数库文件。/usr/local: 存放<br>软件升级包。</li>
<li>/usr/share/doc: 系统说明文件存放目录。/usr/share/man: 程序说明文件<br>存放目录。</li>
<li>/var：放置系统执行过程中经常变化的文件，如随时更改的日志文件。</li>
<li>/var/log，/var/log/message：所有的登录文件存放目录，/var/spool/mail：邮件存放<br>的目录，/var/run:程序或服务启动后，其PID存放在该目录下。</li>
</ul>
<h2 id="Linux-基本命令"><a href="#Linux-基本命令" class="headerlink" title="Linux 基本命令"></a>Linux 基本命令</h2><h3 id="命令基本格式"><a href="#命令基本格式" class="headerlink" title="命令基本格式"></a>命令基本格式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">command [-options] [parameter1] ...</div></pre></td></tr></table></figure>
<h3 id="目录操作"><a href="#目录操作" class="headerlink" title="目录操作"></a>目录操作</h3><h4 id="根目录"><a href="#根目录" class="headerlink" title="根目录"></a>根目录</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">python@ubuntu:~$ cd /  # 进入根目录</div><div class="line">python@ubuntu:/$ pwd   # 查看当前路径，在根目录下</div></pre></td></tr></table></figure>
<h4 id="用户目录"><a href="#用户目录" class="headerlink" title="用户目录"></a>用户目录</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">python@ubuntu:/$ cd ~  # 进入当前用户的home目录</div><div class="line">python@ubuntu:~$ pwd</div><div class="line">/home/python</div></pre></td></tr></table></figure>
<h4 id="相对路径与绝对路径"><a href="#相对路径与绝对路径" class="headerlink" title="相对路径与绝对路径"></a>相对路径与绝对路径</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">python@ubuntu:~$ pwd</div><div class="line">/home/python</div><div class="line">python@ubuntu:~$ cd ../  # 上级目录</div><div class="line">python@ubuntu:/home$</div><div class="line">python@ubuntu:/home$ cd ./  # 当前目录</div><div class="line">python@ubuntu:/home$</div></pre></td></tr></table></figure>
<h4 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">python@ubuntu:/home$ ls -lh  # 查看当前文件夹下的文件与文件夹信息</div><div class="line">总用量 8.0K</div><div class="line">drwxr-xr-x 44 python python 4.0K 6月  13 14:05 python</div><div class="line">-rwxrwxrwx  1 root   root      0 3月  30 22:42 share</div><div class="line">drwxr-xr-x  2 xiao   xiao   4.0K 2月  23 11:42 xiao</div><div class="line">python@ubuntu:/home$</div></pre></td></tr></table></figure>
<ul>
<li>d 代表文件夹；</li>
<li>‘-’ 代表普通文件；</li>
<li>后面9个字母分别代表用户组权限：文件所有者、用户者、其他用户，每组分配3个字母，分别代表读r、写w和执行x。</li>
</ul>
<h3 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h3><h4 id="帮助文档"><a href="#帮助文档" class="headerlink" title="帮助文档"></a>帮助文档</h4><ul>
<li><p>–help</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ls --help  # 查看ls的帮助文档</div></pre></td></tr></table></figure>
</li>
<li><p>man</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">man ls  # 查看ls的帮助文档</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="自动补全：tab键"><a href="#自动补全：tab键" class="headerlink" title="自动补全：tab键"></a>自动补全：tab键</h4><h4 id="历史命令：history"><a href="#历史命令：history" class="headerlink" title="历史命令：history"></a>历史命令：history</h4><h4 id="查看文件信息"><a href="#查看文件信息" class="headerlink" title="查看文件信息"></a>查看文件信息</h4><p>ls -alh</p>
<ul>
<li>-a 显示所有，包括隐藏</li>
<li>-l 以列表方式显示详细信息</li>
<li>-h 显示文件大小，与 -l 配合 使用</li>
</ul>
<h4 id="重新定向-gt"><a href="#重新定向-gt" class="headerlink" title="重新定向: &gt;"></a>重新定向: &gt;</h4><p>将命令执行结果重新定向并保存到一个文件中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python@ubuntu:/home$ ls &gt; test.txt  #如果test.txt cunzai存在则覆盖</div></pre></td></tr></table></figure></p>
<h4 id="管道："><a href="#管道：" class="headerlink" title="管道： |"></a>管道： |</h4><p>左边为命令的输出作为右边命令的输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python@ubuntu:ps -aux|grep pycharm  # 查看pycharm 进程</div></pre></td></tr></table></figure></p>
<h4 id="清屏：clear-、Ctrl-l-‘l’是小写的L"><a href="#清屏：clear-、Ctrl-l-‘l’是小写的L" class="headerlink" title="清屏：clear 、Ctrl + l (‘l’是小写的L)"></a>清屏：clear 、Ctrl + l (‘l’是小写的L)</h4><h4 id="切换工作目录：-cd"><a href="#切换工作目录：-cd" class="headerlink" title="切换工作目录： cd"></a>切换工作目录： cd</h4><ul>
<li>cd ~  切换到当前用户主目录</li>
<li>cd .  切换当前目录</li>
<li>cd .. 切换到上级目录</li>
<li>cd -  切换到上次所在目录</li>
</ul>
<h4 id="显示当前路径：-pwd"><a href="#显示当前路径：-pwd" class="headerlink" title="显示当前路径： pwd"></a>显示当前路径： pwd</h4><h4 id="创建目录：-mkdir"><a href="#创建目录：-mkdir" class="headerlink" title="创建目录： mkdir"></a>创建目录： mkdir</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">python@ubuntu:mkdir test</div><div class="line">python@ubuntu:mkdir a/b/c # 在当前路径下递归创建文件夹</div><div class="line">python@ubuntu:~$ cd a</div><div class="line">python@ubuntu:~/a$ tree</div><div class="line">.</div><div class="line">└── b</div><div class="line">    └── c</div></pre></td></tr></table></figure>
<h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><h4 id="删除文件-目录：-rm"><a href="#删除文件-目录：-rm" class="headerlink" title="删除文件/目录： rm"></a>删除文件/目录： rm</h4><p>rm 操作要小心，删除后的文件无法找回<br><a href="http://www.sohu.com/a/71271181_163917" target="_blank" rel="external">小案例</a></p>
<ul>
<li>-i  交互方式执行</li>
<li>-f  强制执行</li>
<li>-r  递归删除目录下的内容，包括文件夹</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">python@ubuntu:~/a/b$ touch test.txt  # 创建新文件</div><div class="line">python@ubuntu:~/a/b$ ls</div><div class="line">c  test.txt</div><div class="line">python@ubuntu:~/a/b$ rm test.txt -i  # 询问是否删除</div><div class="line">rm：是否删除普通空文件 &apos;test.txt&apos;？ y</div><div class="line">python@ubuntu:~/a/b$ ls</div><div class="line">c</div></pre></td></tr></table></figure>
<h4 id="链接：-ln"><a href="#链接：-ln" class="headerlink" title="链接： ln"></a>链接： ln</h4><ul>
<li><p>软连接：不占磁盘空间，作为指针指向硬链接地址，删除源文件，链接文件不可用；<br>ln -s 源文件 链接文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">python@ubuntu:~/a$ ln -s test.txt test_soft.txt</div><div class="line">python@ubuntu:~/a$ ls -lah</div><div class="line">总用量 8.0K</div><div class="line">drwxrwxr-x  2 python python 4.0K 6月  13 16:42 .</div><div class="line">drwxr-xr-x 45 python python 4.0K 6月  13 16:38 ..</div><div class="line">-rw-rw-r--  2 python python    0 6月  13 16:39 test_hard.txt</div><div class="line">lrwxrwxrwx  1 python python    8 6月  13 16:42 test_soft.txt -&gt; test.txt</div><div class="line">-rw-rw-r--  2 python python    0 6月  13 16:39 test.txt</div></pre></td></tr></table></figure>
</li>
<li><p>硬链接：创建的新文件，二者间成映射关系，删除其一对另一方无影响；<br>ln 源文件 链接文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">python@ubuntu:~/a$ ln test.txt test_hard.txt</div><div class="line">python@ubuntu:~/a$ ls -lah</div><div class="line">总用量 8.0K</div><div class="line">drwxrwxr-x  2 python python 4.0K 6月  13 16:39 .</div><div class="line">drwxr-xr-x 45 python python 4.0K 6月  13 16:38 ..</div><div class="line">-rw-rw-r--  2 python python    0 6月  13 16:39 test_hard.txt</div><div class="line">-rw-rw-r--  2 python python    0 6月  13 16:39 test.txt</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><br>注意：如果源文件跟链接文件不在同一个路径下并且使用相对路径时，系统始终以链接文件的位置作为起始点查找源文件；否则会出现红色文件，代表链接失败。
</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">python@ubuntu:~/a$ ln ../test.txt ./b/test3.txt</div><div class="line">python@ubuntu:~/a$ cd b</div><div class="line">python@ubuntu:~/a/b$ ls -lah</div><div class="line">总用量 8.0K</div><div class="line">drwxrwxr-x 2 python python 4.0K 6月  13 16:55 .</div><div class="line">drwxrwxr-x 3 python python 4.0K 6月  13 16:51 ..</div><div class="line">-rw-rw-r-- 3 python python    0 6月  13 16:38 test3.txt</div><div class="line">python@ubuntu:~/a/b$ cd ../</div><div class="line">python@ubuntu:~/a$ ln -s ../test.txt ./b/test4.txt</div><div class="line">python@ubuntu:~/a$ cd b</div><div class="line">python@ubuntu:~/a/b$ ls -lah</div><div class="line">总用量 8.0K</div><div class="line">drwxrwxr-x 2 python python 4.0K 6月  13 16:56 .</div><div class="line">drwxrwxr-x 3 python python 4.0K 6月  13 16:51 ..</div><div class="line">-rw-rw-r-- 3 python python    0 6月  13 16:38 test3.txt</div><div class="line">lrwxrwxrwx 1 python python   11 6月  13 16:56 test4.txt -&gt; ../test.txt</div><div class="line">python@ubuntu:~/a/b$</div></pre></td></tr></table></figure>
<h4 id="查看或合并文件内容：cat"><a href="#查看或合并文件内容：cat" class="headerlink" title="查看或合并文件内容：cat"></a>查看或合并文件内容：cat</h4><p>例如，在test.txt 中写入hello world，在终端中打印出文件的全部内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">python@ubuntu:~/a/b$ cat test.txt</div><div class="line">hello world</div></pre></td></tr></table></figure></p>
<p>可与 重定向&gt; 一起写入，对文件内容进行更改。</p>
<h4 id="文件搜索：grep"><a href="#文件搜索：grep" class="headerlink" title="文件搜索：grep"></a>文件搜索：grep</h4><ul>
<li>grep [-选项] ‘搜索内容串’文件名</li>
<li>-v  显示不包含匹配文本的行</li>
<li>-n  显示匹配行及行号</li>
<li>-i  忽略大小写</li>
<li>注意：可用正则表达式</li>
</ul>
<h4 id="查找文件：find"><a href="#查找文件：find" class="headerlink" title="查找文件：find"></a>查找文件：find</h4><ul>
<li>find 文件夹 [-name] 文件名</li>
<li>find 文件夹 [-size] 大小</li>
<li>find 文件夹 [-perm权限] 权限值</li>
</ul>
<h4 id="查找文件：cp"><a href="#查找文件：cp" class="headerlink" title="查找文件：cp"></a>查找文件：cp</h4><p>cp 源文件 复制文件</p>
<ul>
<li>-a 可用于目录，复制全部文件、链接</li>
<li>-f 强制复制，不提示</li>
<li>-i 交互式，覆盖时提示</li>
<li>-r 递归复制文件夹内的文件</li>
<li>-v 显示进度</li>
</ul>
<h4 id="移动文件或重命名：mv"><a href="#移动文件或重命名：mv" class="headerlink" title="移动文件或重命名：mv"></a>移动文件或重命名：mv</h4><p>mv 源文件 目标文件</p>
<h4 id="打包并压缩-解压："><a href="#打包并压缩-解压：" class="headerlink" title="打包并压缩/解压："></a>打包并压缩/解压：</h4><ul>
<li><p>方法一：</p>
<ul>
<li>tar cvzf 压缩包包名 文件1 文件2 …</li>
<li>tar zxvf 压缩包包名 -C 指定的文件夹(若无，可省略-C)</li>
</ul>
</li>
</ul>
<ul>
<li><p>方法二：</p>
<ul>
<li>tar -jcvf 压缩包包名 文件…</li>
<li>tar -jxvf 压缩包包名</li>
</ul>
</li>
</ul>
<h3 id="用户操作"><a href="#用户操作" class="headerlink" title="用户操作"></a>用户操作</h3><h4 id="查看命令位置：which"><a href="#查看命令位置：which" class="headerlink" title="查看命令位置：which"></a>查看命令位置：which</h4><p>which commend</p>
<h4 id="切换用户：su"><a href="#切换用户：su" class="headerlink" title="切换用户：su"></a>切换用户：su</h4><ul>
<li>su 用户名</li>
<li>su -s  切换到管理员权限</li>
</ul>
<h4 id="修改文件权限：chmod"><a href="#修改文件权限：chmod" class="headerlink" title="修改文件权限：chmod"></a>修改文件权限：chmod</h4><ul>
<li><p>字母法：chmod u/g/o/a +/-/= rwx 文件名</p>
<ul>
<li>u  文件拥有者</li>
<li>g  与文件拥有者同组的人</li>
<li>o  除上述其他人</li>
<li><p>a  所有人</p>
</li>
<li><ul>
<li>加权限</li>
</ul>
</li>
<li><ul>
<li>减权限</li>
</ul>
</li>
<li>=  赋予权限</li>
</ul>
</li>
<li><p>数字法：</p>
<ul>
<li>chmod 三数字 文件名</li>
</ul>
</li>
</ul>
<h3 id="配置操作"><a href="#配置操作" class="headerlink" title="配置操作"></a>配置操作</h3><h4 id="查看进程：ps"><a href="#查看进程：ps" class="headerlink" title="查看进程：ps"></a>查看进程：ps</h4><ul>
<li>a  显示终端上的全部进程</li>
<li>u  显示进程的详细状态</li>
<li>x  显示没有终端的进程，即以守护进程开启的进程</li>
<li>r  只显示正在运行的进程</li>
</ul>
<h4 id="终止进程：kill"><a href="#终止进程：kill" class="headerlink" title="终止进程：kill"></a>终止进程：kill</h4><p>kill [-signal] pid</p>
<p>一般与ps 一起使用，后者查看进程号，前者终止。</p>
<h4 id="关机"><a href="#关机" class="headerlink" title="关机"></a>关机</h4><ul>
<li>shutdown  关机</li>
<li>reboot  重启</li>
<li>init 0  关机最快的方法</li>
<li>init 6  重启追快的方法</li>
</ul>
<h4 id="查看和配置网卡信息：ifconfig"><a href="#查看和配置网卡信息：ifconfig" class="headerlink" title="查看和配置网卡信息：ifconfig"></a>查看和配置网卡信息：ifconfig</h4><ul>
<li>ifconfig  只查看</li>
<li>sudo ifconfig ens33 192:168:1:1  修改ip地址</li>
</ul>
<p>ens指网卡</p>
<h4 id="测试远程主机的连通性：ping"><a href="#测试远程主机的连通性：ping" class="headerlink" title="测试远程主机的连通性：ping"></a>测试远程主机的连通性：ping</h4><ul>
<li>ping www.baidu.com</li>
<li>ping 61.135.169.121  百度的ip</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Linux-初步认识&quot;&gt;&lt;a href=&quot;#Linux-初步认识&quot; class=&quot;headerlink&quot; title=&quot;Linux 初步认识&quot;&gt;&lt;/a&gt;Linux 初步认识&lt;/h1&gt;&lt;p&gt;Linux是一套开源的类Unix操作系统，是一个可实现多用户、多任务、支持多线程和多CPU的网络操作系统。它继承于Unix操作系统以网络为核心的设计思想，因而可运行主要的UNIX工具软件、应用程序和网络协议，并且支持32位和64位硬件。&lt;/p&gt;
&lt;p&gt;目前，较为流行的版本有Linux Mint、Debian、Ubuntu、openSUSE、redhat、Fedora等。Linux系统应用很广泛，在个人桌面、服务器、嵌入式（如机顶盒、远程控制交换机、智能家居等）等领域都渗透其中。因为我接触的主要是ubuntu，以下内容涉及的也是ubuntu。&lt;br&gt;More info：&lt;a href=&quot;http://www.xuexila.com/diannao/xitong/linux/656216.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Linux 系统排行排行&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Linux-目录存储&quot;&gt;&lt;a href=&quot;#Linux-目录存储&quot; class=&quot;headerlink&quot; title=&quot;Linux 目录存储&quot;&gt;&lt;/a&gt;Linux 目录存储&lt;/h2&gt;&lt;p&gt;不同于我们经常应用的windows，Linux 没有磁盘的概念，只有一个根目录，所有的文件都存放在根目录下，跟mac系统很相近。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;/：根目录，一般根目录下只存放目录，在Linux下有且只有一个根目录。所有的东西都以此为起点。当你在终端输入“/home”，你其实是在告诉电脑，先从根目录开始，再进入到home目录。
    
    </summary>
    
      <category term="操作系统" scheme="http://Yiwanq.com/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="linux、Ubuntu" scheme="http://Yiwanq.com/tags/linux%E3%80%81Ubuntu/"/>
    
  </entry>
  
</feed>
